exports.ids=[1],exports.modules=[,,,,,,,,,,function(e,t,n){e.exports=function(e){function t(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return r.colors[Math.abs(t)%r.colors.length]}function r(e){let n;function i(...e){if(!i.enabled)return;const t=i,o=Number(new Date),s=o-(n||o);t.diff=s,t.prev=n,t.curr=o,n=o,e[0]=r.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let c=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,(n,o)=>{if("%%"===n)return n;c++;const s=r.formatters[o];if("function"==typeof s){const r=e[c];n=s.call(t,r),e.splice(c,1),c--}return n}),r.formatArgs.call(t,e),(t.log||r.log).apply(t,e)}return i.namespace=e,i.enabled=r.enabled(e),i.useColors=r.useColors(),i.color=t(e),i.destroy=o,i.extend=s,"function"==typeof r.init&&r.init(i),r.instances.push(i),i}function o(){const e=r.instances.indexOf(this);return-1!==e&&(r.instances.splice(e,1),!0)}function s(e,t){const n=r(this.namespace+(void 0===t?":":t)+e);return n.log=this.log,n}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(e){return e instanceof Error?e.stack||e.message:e},r.disable=function(){const e=[...r.names.map(i),...r.skips.map(i).map(e=>"-"+e)].join(",");return r.enable(""),e},r.enable=function(e){let t;r.save(e),r.names=[],r.skips=[];const n=("string"==typeof e?e:"").split(/[\s,]+/),o=n.length;for(t=0;t<o;t++)n[t]&&("-"===(e=n[t].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+e.substr(1)+"$")):r.names.push(new RegExp("^"+e+"$")));for(t=0;t<r.instances.length;t++){const e=r.instances[t];e.enabled=r.enabled(e.namespace)}},r.enabled=function(e){if("*"===e[e.length-1])return!0;let t,n;for(t=0,n=r.skips.length;t<n;t++)if(r.skips[t].test(e))return!1;for(t=0,n=r.names.length;t<n;t++)if(r.names[t].test(e))return!0;return!1},r.humanize=n(30),Object.keys(e).forEach(t=>{r[t]=e[t]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=t,r.enable(r.load()),r}},,,,,,,,,function(e,t,n){var r=n(20),o=n(21),s=n(8),i=n(22),c=n(23),u=n(9).inherits,a=n(28)("https-proxy-agent");function l(e){if(!(this instanceof l))return new l(e);if("string"==typeof e&&(e=s.parse(e)),!e)throw new Error("an HTTP(S) proxy server `host` and `port` must be specified!");a("creating new HttpsProxyAgent instance: %o",e),c.call(this,e);var t=Object.assign({},e);this.secureProxy=!!t.protocol&&/^https:?$/i.test(t.protocol),t.host=t.hostname||t.host,t.port=+t.port||(this.secureProxy?443:80),!this.secureProxy||"ALPNProtocols"in t||(t.ALPNProtocols=["http 1.1"]),t.host&&t.path&&(delete t.path,delete t.pathname),this.proxy=t}function f(e){e.resume()}e.exports=l,u(l,c),l.prototype.callback=function(e,t,n){var s,c=this.proxy;s=this.secureProxy?o.connect(c):r.connect(c);var u=[],l=0;function p(){var i=s.read();i?function(i){u.push(i),l+=i.length;var c=Buffer.concat(u,l),d=c.toString("ascii");if(!~d.indexOf("\r\n\r\n"))return a("have not received end of HTTP headers yet..."),void p();var m=d.substring(0,d.indexOf("\r\n")),C=+m.split(" ")[1];if(a("got proxy server response: %o",m),200==C){var g=s;u=c=null,t.secureEndpoint&&(a("upgrading proxy-connected socket to TLS connection: %o",t.host),t.socket=s,t.servername=t.servername||t.host,t.host=null,t.hostname=null,t.port=null,g=o.connect(t)),h(),e.once("socket",f),n(null,g)}else h(),s.destroy(),(s=new r.Socket).readable=!0,u=c,e.once("socket",v),n(null,s)}(i):s.once("readable",p)}function h(){s.removeListener("end",m),s.removeListener("error",C),s.removeListener("close",d),s.removeListener("readable",p)}function d(e){a("onclose had error %o",e)}function m(){a("onend")}function C(e){h(),n(e)}function v(e){a("replaying proxy buffer for failed request"),i(e.listenerCount("data")>0),e.push(u),u=null}s.on("error",C),s.on("close",d),s.on("end",m),p();var g="CONNECT "+(t.host+":"+t.port)+" HTTP/1.1\r\n",y=Object.assign({},c.headers);c.auth&&(y["Proxy-Authorization"]="Basic "+Buffer.from(c.auth).toString("base64"));var b,w,_=t.host;b=t.port,w=t.secureEndpoint,Boolean(!w&&80===b||w&&443===b)||(_+=":"+t.port),y.Host=_,y.Connection="close",Object.keys(y).forEach(function(e){g+=e+": "+y[e]+"\r\n"}),s.write(g+"\r\n")}},,,,function(e,t,n){"use strict";const r=(this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}})(n(24)),o=n(27);function s(){const{stack:e}=new Error;return"string"==typeof e&&e.split("\n").some(e=>-1!==e.indexOf("(https.js:"))}function i(e,t){return new i.Agent(e,t)}!function(e){e.Agent=class extends o.EventEmitter{constructor(e,t){super(),this._promisifiedCallback=void 0;let n=t;"function"==typeof e?this.callback=e:e&&(n=e),this.timeout=null,n&&"number"==typeof n.timeout&&(this.timeout=n.timeout),this.options=n||{},this.maxFreeSockets=1,this.maxSockets=1,this.sockets=[],this.requests=[]}get defaultPort(){return"number"==typeof this._defaultPort?this._defaultPort:s()?443:80}set defaultPort(e){this._defaultPort=e}callback(e,t,n){throw new Error('"agent-base" has no default implementation, you must subclass and override `callback()`')}addRequest(e,t){const n=Object.assign(Object.assign({},t),{secureEndpoint:s()});null==n.host&&(n.host="localhost"),null==n.port&&(n.port=n.secureEndpoint?443:80);const o=Object.assign(Object.assign({},this.options),n);o.host&&o.path&&delete o.path,delete o.agent,delete o.hostname,delete o._defaultAgent,delete o.defaultPort,delete o.createConnection,e._last=!0,e.shouldKeepAlive=!1;let i=!1,c=null;const u=this.timeout,a=this.freeSocket;function l(t){e._hadError||(e.emit("error",t),e._hadError=!0)}function f(e){i||(null!==c&&(clearTimeout(c),c=null),l(e))}if("function"==typeof this.callback){this._promisifiedCallback||(this.callback.length>=3?this._promisifiedCallback=r.default(this.callback,{thisArg:this}):this._promisifiedCallback=this.callback),"number"==typeof u&&u>0&&(c=setTimeout(function(){c=null,i=!0;const e=new Error(`A "socket" was not created for HTTP request before ${u}ms`);e.code="ETIMEOUT",l(e)},u)),"port"in o&&"number"!=typeof o.port&&(o.port=Number(o.port));try{Promise.resolve(this._promisifiedCallback(e,o)).then(function(t){let n;if(!i){var r;if(null!=c&&(clearTimeout(c),c=null),r=t,!(Boolean(r)&&"function"==typeof r.addRequest||function(e){return Boolean(e)&&"function"==typeof e.addRequest}(t)))return t?((n=t).on("free",function(){a(n,o)}),void e.onSocket(n)):void l(new Error(`no Duplex stream was returned to agent-base for \`${e.method} ${e.path}\``));t.addRequest(e,o)}},f)}catch(e){Promise.reject(e).catch(f)}}else l(new Error("`callback` is not defined"))}freeSocket(e,t){e.destroy()}destroy(){}}}(i||(i={})),i.prototype=i.Agent.prototype,e.exports=i},function(e,t,n){"use strict";e.exports=function(){var e=n(25);function t(e){return e&&"function"==typeof e.then&&"function"==typeof e.catch}return function(n,r){return function(){for(var o=arguments.length,s=Array(o),i=0;i<o;i++)s[i]=arguments[i];var c=r&&r.multiArgs,u=void 0;return r&&r.thisArg?u=r.thisArg:r&&(u=r),new e(function(e,r){s.push(function(t){if(t)return r(t);for(var n=arguments.length,o=Array(n>1?n-1:0),s=1;s<n;s++)o[s-1]=arguments[s];if(!1==!!c)return e(o[0]);e(o)});var o=n.apply(u,s);t(o)&&e(o)})}}}()},function(e,t,n){"use strict";var r;e.exports=(r=void 0,r=void 0!==global?global:void 0!==window&&window.document?window:self,function(){if(!r.hasOwnProperty("Promise"))return!1;var e,t=r.Promise;return!!(t.hasOwnProperty("resolve")&&t.hasOwnProperty("reject")&&t.hasOwnProperty("all")&&t.hasOwnProperty("race")&&(e=void 0,new r.Promise(function(t){e=t})&&"function"==typeof e))}()?r.Promise:n(26).Promise)},function(e,t,n){
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.8+1e68dce6
 */var r;r=function(){"use strict";function e(e){return"function"==typeof e}var t=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},n=0,r=void 0,o=void 0,s=function(e,t){p[n]=e,p[n+1]=t,2===(n+=2)&&(o?o(h):g())},i="undefined"!=typeof window?window:void 0,c=i||{},u=c.MutationObserver||c.WebKitMutationObserver,a="undefined"==typeof self&&"undefined"!=typeof process&&"[object process]"==={}.toString.call(process),l="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function f(){var e=setTimeout;return function(){return e(h,1)}}var p=new Array(1e3);function h(){for(var e=0;e<n;e+=2){(0,p[e])(p[e+1]),p[e]=void 0,p[e+1]=void 0}n=0}var d,m,C,v,g=void 0;function y(e,t){var n=this,r=new this.constructor(_);void 0===r[w]&&L(r);var o=n._state;if(o){var i=arguments[o-1];s(function(){return M(o,r,i,n._result)})}else T(n,r,e,t);return r}function b(e){if(e&&"object"==typeof e&&e.constructor===this)return e;var t=new this(_);return x(t,e),t}a?g=function(){return process.nextTick(h)}:u?(m=0,C=new u(h),v=document.createTextNode(""),C.observe(v,{characterData:!0}),g=function(){v.data=m=++m%2}):l?((d=new MessageChannel).port1.onmessage=h,g=function(){return d.port2.postMessage(0)}):g=void 0===i?function(){try{var e=Function("return this")().require("vertx");return void 0!==(r=e.runOnLoop||e.runOnContext)?function(){r(h)}:f()}catch(e){return f()}}():f();var w=Math.random().toString(36).substring(2);function _(){}var F=void 0,O=1,E=2;function A(t,n,r){n.constructor===t.constructor&&r===y&&n.constructor.resolve===b?function(e,t){t._state===O?P(e,t._result):t._state===E?R(e,t._result):T(t,void 0,function(t){return x(e,t)},function(t){return R(e,t)})}(t,n):void 0===r?P(t,n):e(r)?function(e,t,n){s(function(e){var r=!1,o=function(e,t,n,r){try{e.call(t,n,r)}catch(e){return e}}(n,t,function(n){r||(r=!0,t!==n?x(e,n):P(e,n))},function(t){r||(r=!0,R(e,t))},e._label);!r&&o&&(r=!0,R(e,o))},e)}(t,n,r):P(t,n)}function x(e,t){if(e===t)R(e,new TypeError("You cannot resolve a promise with itself"));else if(o=typeof(r=t),null===r||"object"!==o&&"function"!==o)P(e,t);else{var n=void 0;try{n=t.then}catch(t){return void R(e,t)}A(e,t,n)}var r,o}function k(e){e._onerror&&e._onerror(e._result),S(e)}function P(e,t){e._state===F&&(e._result=t,e._state=O,0!==e._subscribers.length&&s(S,e))}function R(e,t){e._state===F&&(e._state=E,e._result=t,s(k,e))}function T(e,t,n,r){var o=e._subscribers,i=o.length;e._onerror=null,o[i]=t,o[i+O]=n,o[i+E]=r,0===i&&e._state&&s(S,e)}function S(e){var t=e._subscribers,n=e._state;if(0!==t.length){for(var r=void 0,o=void 0,s=e._result,i=0;i<t.length;i+=3)r=t[i],o=t[i+n],r?M(n,r,o,s):o(s);e._subscribers.length=0}}function M(t,n,r,o){var s=e(r),i=void 0,c=void 0,u=!0;if(s){try{i=r(o)}catch(e){u=!1,c=e}if(n===i)return void R(n,new TypeError("A promises callback cannot return that same promise."))}else i=o;n._state!==F||(s&&u?x(n,i):!1===u?R(n,c):t===O?P(n,i):t===E&&R(n,i))}var j=0;function L(e){e[w]=j++,e._state=void 0,e._result=void 0,e._subscribers=[]}var I=function(){function e(e,n){this._instanceConstructor=e,this.promise=new e(_),this.promise[w]||L(this.promise),t(n)?(this.length=n.length,this._remaining=n.length,this._result=new Array(this.length),0===this.length?P(this.promise,this._result):(this.length=this.length||0,this._enumerate(n),0===this._remaining&&P(this.promise,this._result))):R(this.promise,new Error("Array Methods must be provided an Array"))}return e.prototype._enumerate=function(e){for(var t=0;this._state===F&&t<e.length;t++)this._eachEntry(e[t],t)},e.prototype._eachEntry=function(e,t){var n=this._instanceConstructor,r=n.resolve;if(r===b){var o=void 0,s=void 0,i=!1;try{o=e.then}catch(e){i=!0,s=e}if(o===y&&e._state!==F)this._settledAt(e._state,t,e._result);else if("function"!=typeof o)this._remaining--,this._result[t]=e;else if(n===N){var c=new n(_);i?R(c,s):A(c,e,o),this._willSettleAt(c,t)}else this._willSettleAt(new n(function(t){return t(e)}),t)}else this._willSettleAt(r(e),t)},e.prototype._settledAt=function(e,t,n){var r=this.promise;r._state===F&&(this._remaining--,e===E?R(r,n):this._result[t]=n),0===this._remaining&&P(r,this._result)},e.prototype._willSettleAt=function(e,t){var n=this;T(e,void 0,function(e){return n._settledAt(O,t,e)},function(e){return n._settledAt(E,t,e)})},e}(),N=function(){function t(e){this[w]=j++,this._result=this._state=void 0,this._subscribers=[],_!==e&&("function"!=typeof e&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof t?function(e,t){try{t(function(t){x(e,t)},function(t){R(e,t)})}catch(t){R(e,t)}}(this,e):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}return t.prototype.catch=function(e){return this.then(null,e)},t.prototype.finally=function(t){var n=this.constructor;return e(t)?this.then(function(e){return n.resolve(t()).then(function(){return e})},function(e){return n.resolve(t()).then(function(){throw e})}):this.then(t,t)},t}();return N.prototype.then=y,N.all=function(e){return new I(this,e).promise},N.race=function(e){var n=this;return t(e)?new n(function(t,r){for(var o=e.length,s=0;s<o;s++)n.resolve(e[s]).then(t,r)}):new n(function(e,t){return t(new TypeError("You must pass an array to race."))})},N.resolve=b,N.reject=function(e){var t=new this(_);return R(t,e),t},N._setScheduler=function(e){o=e},N._setAsap=function(e){s=e},N._asap=s,N.polyfill=function(){var e=void 0;if("undefined"!=typeof global)e=global;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var t=e.Promise;if(t){var n=null;try{n=Object.prototype.toString.call(t.resolve())}catch(e){}if("[object Promise]"===n&&!t.cast)return}e.Promise=N},N.Promise=N,N},e.exports=r()},,function(e,t,n){"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?e.exports=n(29):e.exports=n(31)},function(e,t,n){t.log=function(...e){return"object"==typeof console&&console.log&&console.log(...e)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,o=0;t[0].replace(/%[a-zA-Z%]/g,e=>{"%%"!==e&&(r++,"%c"===e&&(o=r))}),t.splice(o,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=n(10)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},function(e,t){var n=1e3,r=60*n,o=60*r,s=24*o,i=7*s,c=365.25*s;function u(e,t,n,r){var o=t>=1.5*n;return Math.round(e/n)+" "+r+(o?"s":"")}e.exports=function(e,t){t=t||{};var a=typeof e;if("string"===a&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var u=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return u*c;case"weeks":case"week":case"w":return u*i;case"days":case"day":case"d":return u*s;case"hours":case"hour":case"hrs":case"hr":case"h":return u*o;case"minutes":case"minute":case"mins":case"min":case"m":return u*r;case"seconds":case"second":case"secs":case"sec":case"s":return u*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return u;default:return}}(e);if("number"===a&&isFinite(e))return t.long?function(e){var t=Math.abs(e);if(t>=s)return u(e,t,s,"day");if(t>=o)return u(e,t,o,"hour");if(t>=r)return u(e,t,r,"minute");if(t>=n)return u(e,t,n,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=s)return Math.round(e/s)+"d";if(t>=o)return Math.round(e/o)+"h";if(t>=r)return Math.round(e/r)+"m";if(t>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){const r=n(32),o=n(9);t.init=function(e){e.inspectOpts={};const n=Object.keys(t.inspectOpts);for(let r=0;r<n.length;r++)e.inspectOpts[n[r]]=t.inspectOpts[n[r]]},t.log=function(...e){return process.stderr.write(o.format(...e)+"\n")},t.formatArgs=function(n){const{namespace:r,useColors:o}=this;if(o){const t=this.color,o="[3"+(t<8?t:"8;5;"+t),s=`  ${o};1m${r} [0m`;n[0]=s+n[0].split("\n").join("\n"+s),n.push(o+"m+"+e.exports.humanize(this.diff)+"[0m")}else n[0]=function(){if(t.inspectOpts.hideDate)return"";return(new Date).toISOString()+" "}()+r+" "+n[0]},t.save=function(e){e?process.env.DEBUG=e:delete process.env.DEBUG},t.load=function(){return process.env.DEBUG},t.useColors=function(){return"colors"in t.inspectOpts?Boolean(t.inspectOpts.colors):r.isatty(process.stderr.fd)},t.colors=[6,2,3,4,5,1];try{const e=n(33);e&&(e.stderr||e).level>=2&&(t.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}t.inspectOpts=Object.keys(process.env).filter(e=>/^debug_/i.test(e)).reduce((e,t)=>{const n=t.substring(6).toLowerCase().replace(/_([a-z])/g,(e,t)=>t.toUpperCase());let r=process.env[t];return r=!!/^(yes|on|true|enabled)$/i.test(r)||!/^(no|off|false|disabled)$/i.test(r)&&("null"===r?null:Number(r)),e[n]=r,e},{}),e.exports=n(10)(t);const{formatters:s}=e.exports;s.o=function(e){return this.inspectOpts.colors=this.useColors,o.inspect(e,this.inspectOpts).replace(/\s*\n\s*/g," ")},s.O=function(e){return this.inspectOpts.colors=this.useColors,o.inspect(e,this.inspectOpts)}},,function(e,t,n){"use strict";const r=n(34),o=n(35),{env:s}=process;let i;function c(e){return function(e){return 0!==e&&{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}(function(e){if(0===i)return 0;if(o("color=16m")||o("color=full")||o("color=truecolor"))return 3;if(o("color=256"))return 2;if(e&&!e.isTTY&&void 0===i)return 0;const t=i||0;if("dumb"===s.TERM)return t;if("win32"===process.platform){const e=r.release().split(".");return Number(process.versions.node.split(".")[0])>=8&&Number(e[0])>=10&&Number(e[2])>=10586?Number(e[2])>=14931?3:2:1}if("CI"in s)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI"].some(e=>e in s)||"codeship"===s.CI_NAME?1:t;if("TEAMCITY_VERSION"in s)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(s.TEAMCITY_VERSION)?1:0;if("truecolor"===s.COLORTERM)return 3;if("TERM_PROGRAM"in s){const e=parseInt((s.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(s.TERM_PROGRAM){case"iTerm.app":return e>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(s.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(s.TERM)?1:"COLORTERM"in s?1:t}(e))}o("no-color")||o("no-colors")||o("color=false")||o("color=never")?i=0:(o("color")||o("colors")||o("color=true")||o("color=always"))&&(i=1),"FORCE_COLOR"in s&&(i=!0===s.FORCE_COLOR||"true"===s.FORCE_COLOR?1:!1===s.FORCE_COLOR||"false"===s.FORCE_COLOR?0:0===s.FORCE_COLOR.length?1:Math.min(parseInt(s.FORCE_COLOR,10),3)),e.exports={supportsColor:c,stdout:c(process.stdout),stderr:c(process.stderr)}},,function(e,t,n){"use strict";e.exports=(e,t)=>{t=t||process.argv;const n=e.startsWith("-")?"":1===e.length?"-":"--",r=t.indexOf(n+e),o=t.indexOf("--");return-1!==r&&(-1===o||r<o)}}];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,